#include "stdafx.h"
#include "css_property.h"
#include <unordered_map>
#include "base/string_util.h"

namespace css
{
	const static PropertyId kPropertyAliases[] = {
		Property_TransformOrigin,
		Property_PerspectiveOrigin,
		Property_Perspective,
		Property_TransformStyle,
		Property_BackfaceVisibility,
		Property_BorderImage,
		Property_Transition,
		Property_TransitionDelay,
		Property_TransitionDuration,
		Property_TransitionProperty,
		Property_TransitionTimingFunction,
		Property_Animation,
		Property_AnimationDelay,
		Property_AnimationDirection,
		Property_AnimationDuration,
		Property_AnimationFillMode,
		Property_AnimationIterationCount,
		Property_AnimationName,
		Property_AnimationPlayState,
		Property_AnimationTimingFunction,
	};

	static const char* kCSSRawProperties[] = {
		"-moz-appearance",
		"-moz-outline-radius-topleft",
		"-moz-outline-radius-topright",
		"-moz-outline-radius-bottomright",
		"-moz-outline-radius-bottomleft",
		"-moz-tab-size",
		"-x-system-font",
		"animation-delay",
		"animation-direction",
		"animation-duration",
		"animation-fill-mode",
		"animation-iteration-count",
		"animation-name",
		"animation-play-state",
		"animation-timing-function",
		"background-attachment",
		"background-clip",
		"background-color",
		"background-image",
		"-moz-background-inline-policy",
		"background-origin",
		"background-position",
		"background-repeat",
		"background-size",
		"-moz-binding",
		"border-bottom-color",
		"-moz-border-bottom-colors",
		"border-bottom-style",
		"border-bottom-width",
		"border-collapse",
		"border-end-color-value",
		"border-end-style-value",
		"border-end-width-value",
		"border-image-source",
		"border-image-slice",
		"border-image-width",
		"border-image-outset",
		"border-image-repeat",
		"border-left-color-value",
		"border-left-color-ltr-source",
		"border-left-color-rtl-source",
		"-moz-border-left-colors",
		"border-left-style-value",
		"border-left-style-ltr-source",
		"border-left-style-rtl-source",
		"border-left-width-value",
		"border-left-width-ltr-source",
		"border-left-width-rtl-source",
		"border-right-color-value",
		"border-right-color-ltr-source",
		"border-right-color-rtl-source",
		"-moz-border-right-colors",
		"border-right-style-value",
		"border-right-style-ltr-source",
		"border-right-style-rtl-source",
		"border-right-width-value",
		"border-right-width-ltr-source",
		"border-right-width-rtl-source",
		"border-spacing",
		"border-start-color-value",
		"border-start-style-value",
		"border-start-width-value",
		"border-top-color",
		"-moz-border-top-colors",
		"border-top-style",
		"border-top-width",
		"border-top-left-radius",
		"border-top-right-radius",
		"border-bottom-right-radius",
		"border-bottom-left-radius",
		"bottom",
		"box-shadow",
		"-moz-box-sizing",
		"caption-side",
		"clear",
		"clip",
		"color",
		"-moz-column-count",
		"-moz-column-fill",
		"-moz-column-width",
		"-moz-column-gap",
		"-moz-column-rule-color",
		"-moz-column-rule-style",
		"-moz-column-rule-width",
		"content",
		"counter-increment",
		"counter-reset",
		"cursor",
		"direction",
		"display",
		"empty-cells",
		"align-items",
		"align-self",
		"flex-basis",
		"flex-direction",
		"flex-grow",
		"flex-shrink",
		"order",
		"justify-content",
		"float",
		"-moz-float-edge",
		"font-family",
		"-moz-font-feature-settings",
		"-moz-font-language-override",
		"font-size",
		"font-size-adjust",
		"font-stretch",
		"font-style",
		"font-variant",
		"font-weight",
		"-moz-force-broken-image-icon",
		"height",
		"-moz-image-region",
		"ime-mode",
		"left",
		"letter-spacing",
		"line-height",
		"list-style-image",
		"list-style-position",
		"list-style-type",
		"margin-bottom",
		"margin-end-value",
		"margin-left-value",
		"margin-left-ltr-source",
		"margin-left-rtl-source",
		"margin-right-value",
		"margin-right-ltr-source",
		"margin-right-rtl-source",
		"margin-start-value",
		"margin-top",
		"marker-offset",
		"marks",
		"max-height",
		"max-width",
		"min-height",
		"min-width",
		"opacity",
		"-moz-orient",
		"orphans",
		"outline-color",
		"outline-style",
		"outline-width",
		"outline-offset",
		"overflow-x",
		"overflow-y",
		"padding-bottom",
		"padding-end-value",
		"padding-left-value",
		"padding-left-ltr-source",
		"padding-left-rtl-source",
		"padding-right-value",
		"padding-right-ltr-source",
		"padding-right-rtl-source",
		"padding-start-value",
		"padding-top",
		"page",
		"page-break-after",
		"page-break-before",
		"page-break-inside",
		"paint-order",
		"pointer-events",
		"position",
		"quotes",
		"resize",
		"right",
		"size",
		"table-layout",
		"text-align",
		"-moz-text-align-last",
		"-moz-text-blink",
		"-moz-text-decoration-color",
		"-moz-text-decoration-line",
		"-moz-text-decoration-style",
		"text-indent",
		"text-overflow",
		"text-shadow",
		"-moz-text-size-adjust",
		"text-transform",
		"transform",
		"transform-origin",
		"perspective-origin",
		"perspective",
		"transform-style",
		"backface-visibility",
		"top",
		"transition-delay",
		"transition-duration",
		"transition-property",
		"transition-timing-function",
		"unicode-bidi",
		"-moz-user-focus",
		"-moz-user-input",
		"-moz-user-modify",
		"-moz-user-select",
		"vertical-align",
		"visibility",
		"white-space",
		"widows",
		"width",
		"-moz-window-shadow",
		"word-break",
		"word-spacing",
		"word-wrap",
		"-moz-hyphens",
		"z-index",
		"-moz-box-align",
		"-moz-box-direction",
		"-moz-box-flex",
		"-moz-box-orient",
		"-moz-box-pack",
		"-moz-box-ordinal-group",
		"-moz-stack-sizing",
		"-moz-script-level",
		"-moz-script-size-multiplier",
		"-moz-script-min-size",
		"clip-path",
		"clip-rule",
		"color-interpolation",
		"color-interpolation-filters",
		"dominant-baseline",
		"fill",
		"fill-opacity",
		"fill-rule",
		"filter",
		"flood-color",
		"flood-opacity",
		"image-rendering",
		"lighting-color",
		"marker-end",
		"marker-mid",
		"marker-start",
		"mask",
		"mask-type",
		"shape-rendering",
		"stop-color",
		"stop-opacity",
		"stroke",
		"stroke-dasharray",
		"stroke-dashoffset",
		"stroke-linecap",
		"stroke-linejoin",
		"stroke-miterlimit",
		"stroke-opacity",
		"stroke-width",
		"text-anchor",
		"text-rendering",
		"vector-effect",
		"-x-lang",
		"-x-span",
		"-moz-outline-radius",
		"animation",
		"background",
		"border",
		"border-bottom",
		"border-color",
		"-moz-border-end",
		"-moz-border-end-color",
		"-moz-border-end-style",
		"-moz-border-end-width",
		"border-image",
		"border-left",
		"border-left-color",
		"border-left-style",
		"border-left-width",
		"border-right",
		"border-right-color",
		"border-right-style",
		"border-right-width",
		"-moz-border-start",
		"-moz-border-start-color",
		"-moz-border-start-style",
		"-moz-border-start-width",
		"border-style",
		"border-top",
		"border-width",
		"border-radius",
		"-moz-columns",
		"-moz-column-rule",
		"flex",
		"font",
		"list-style",
		"margin",
		"-moz-margin-end",
		"margin-left",
		"margin-right",
		"-moz-margin-start",
		"outline",
		"overflow",
		"padding",
		"-moz-padding-end",
		"padding-left",
		"padding-right",
		"-moz-padding-start",
		"text-decoration",
		"transition",
		"marker",
		"-moz-transform",
		"-moz-transform-origin",
		"-moz-perspective-origin",
		"-moz-perspective",
		"-moz-transform-style",
		"-moz-backface-visibility",
		"-moz-border-image",
		"-moz-transition",
		"-moz-transition-delay",
		"-moz-transition-duration",
		"-moz-transition-property",
		"-moz-transition-timing-function",
		"-moz-animation",
		"-moz-animation-delay",
		"-moz-animation-direction",
		"-moz-animation-duration",
		"-moz-animation-fill-mode",
		"-moz-animation-iteration-count",
		"-moz-animation-name",
		"-moz-animation-play-state",
		"-moz-animation-timing-function",
	};


	class PropertyTable
	{
	public:
		PropertyTable()
		{
			for (int i = 0; i< Property_COUNT; i++)
			{
				std::string key(kCSSRawProperties[i]);
				StringToLowerASCII(&key);
				map_.insert(std::make_pair(key, (PropertyId)i));
			}
		}

		PropertyId Lookup(const std::string& in)
		{
			std::string key = StringToLowerASCII(in);
			if (map_.count(key))
				return map_.at(key);
			return Property_Unknown;
		}
	private:
		std::unordered_map<std::string, PropertyId> map_;
	};

	static PropertyTable gPropertyTable;

	const char* Property::GetStringValue( PropertyId aProperty )
	{
		if (Property_Unknown < aProperty && aProperty < Property_COUNT)
			return kCSSRawProperties[(int)aProperty];
		return "";
	}

	PropertyId Property::LookupProperty( const std::string& aProperty, EnabledState aEnabled )
	{
		PropertyId res = gPropertyTable.Lookup(aProperty);
		// Check eCSSAliasCount against 0 to make it easy for the
		// compiler to optimize away the 0-aliases case.
		if (res != 0 && res >= Property_COUNT) {
			if (/*IsEnabled(res) ||*/ aEnabled == eAny) {
				res = kPropertyAliases[res - Property_COUNT];
				//NS_ABORT_IF_FALSE(0 <= res && res < eCSSProperty_COUNT,
				//	"aliases must not point to other aliases");
			} else {
				res = Property_Unknown;
			}
		}
		/*if (res != Property_Unknown && aEnabled == eEnabled && !IsEnabled(res)) {
			res = Property_Unknown;
		}
		return res;*/
		return Property_Unknown;
	}

}